# This is a basic workflow that is manually triggered
# This workflow will install Python dependencies and update the html tables

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.

on: [workflow_dispatch]

jobs:
  build:

    runs-on: ubuntu-20.04
    env:
      EARTHDATA_USERNAME: ${{ secrets.EARTHDATA_USERNAME }}
      EARTHDATA_PASSWORD: ${{ secrets.EARTHDATA_PASSWORD }}
      PODAAC_PASSWORD: ${{ secrets.PODAAC_PASSWORD }}

    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true
    - name: Checkout git dependencies
      uses: actions/checkout@v2
      with:
        repository: tsutterley/read-GRACE-harmonics
        path: read-GRACE-harmonics
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install gdal-bin libgdal-dev libgeos-dev
        sudo apt-get install libhdf5-dev libnetcdf-dev
        sudo apt-get install libstdc++6 libxml2-dev libxslt1-dev libsqlite3-dev
        sudo apt-get install texlive texlive-fonts-extra texlive-font-utils
        sudo apt-get install cm-super dvipng font-manager cmake curl gzip wget
        pip install --upgrade pip
        pip install flake8 pytest pytest-cov numpy requests matplotlib
        sudo ln -sv $PWD/assets/fonts/Helvetica /usr/share/fonts/truetype
    - name: Install PROJ
      env:
        JOBS: 2
        PROJ_VERSION: 8.0.1
        PROJ_DATUMGRID_VERSION: 1.8
        PROJ_NETWORK: ON
        SQLITE3_CFLAGS: "-I/usr/local/include"
        SQLITE3_LIBS: "-L/usr/local/lib -lsqlite3"
      run: |
        cd ${RUNNER_TEMP}
        wget -q https://download.osgeo.org/proj/proj-${PROJ_VERSION}.tar.gz
        wget -q http://download.osgeo.org/proj/proj-datumgrid-${PROJ_DATUMGRID_VERSION}.zip
        tar -xzf proj-${PROJ_VERSION}.tar.gz
        unzip proj-datumgrid-${PROJ_DATUMGRID_VERSION}.zip -d proj-${PROJ_VERSION}/data/
        cd proj-${PROJ_VERSION}
        mkdir build
        cd build
        sudo cmake \
            -DPYTHON_EXECUTABLE=/usr/local/bin/python3 \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=true \
            -DCMAKE_INSTALL_PREFIX=/usr/local/ ..
        sudo cmake --build .
        sudo make --quiet --jobs=${JOBS}
        sudo make --quiet install
        make clean
        cd ${GITHUB_WORKSPACE}
        sudo ldconfig --verbose
        sudo projsync --system-directory --all
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 data --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 data --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Install Python packages
      run: |
        export CPLUS_INCLUDE_PATH=/usr/include/gdal
        export C_INCLUDE_PATH=/usr/include/gdal
        pip install git+https://github.com/SciTools/cartopy.git
        pip install git+https://github.com/tsutterley/geoid-toolkit.git
        pip install git+https://github.com/tsutterley/read-GRACE-geocenter.git
        pip install ./read-GRACE-harmonics
    - name: Test with pytest
      run: |
        pytest --verbose --capture=no data/test_font_files.py
        pytest --verbose --capture=no data/test_cartopy.py
    - name: Download GRACE/GRACE-FO data
      run: |
        python data/get_podaac_webdav.py
        python data/podaac_grace_sync.py --directory data/ --netrc data/.netrc \
            --release RL06 --timeout=3600 --log --np=0
        grace_date.py --directory data/ --release RL06 --product GSM --output
        python data/GSFC_grace_date.py --version rl06v1.0 --directory data/
        grace_months_index.py --directory data/ --release RL06 rl06v1.0
    - name: Archive GRACE/GRACE-FO dates
      uses: actions/upload-artifact@v2
      with:
        name: grace-months
        path: |
            data/PODAAC_sync.log
            data/GRACE_months.txt
    - name: Check for updates
      id: changes
      run: |
        if [ -n "$(git status --porcelain data/GRACE_months.txt)" ] ; then
            echo "::set-output name=detected::true";
            echo "::debug::Changes detected";
        else
            echo "::set-output name=detected::false";
            echo "::debug::No changes detected";
        fi
    - name: Update GRACE/GRACE-FO tables
      if: steps.changes.outputs.detected == 'true'
      run: |
        python -c "import gravity_toolkit.utilities; gravity_toolkit.utilities.from_gfz(directory='data')"
        curl https://www.atmosp.physics.utoronto.ca/~peltier/datasets/Ice6G_C_VM5a/ICE-6G_High_Res_Stokes_trend.txt.gz \
          -o data/ICE-6G_High_Res_Stokes_trend.txt.gz
        gunzip data/ICE-6G_High_Res_Stokes_trend.txt.gz
        grace_mean_harmonics.py --directory data/ @data/parameters_CSR_RL06_mean_Ylms_013-108.txt
        grace_mean_harmonics.py --directory data/ @data/parameters_GFZ_RL06_mean_Ylms_013-108.txt
        grace_mean_harmonics.py --directory data/ @data/parameters_JPL_RL06_mean_Ylms_013-108.txt
        python data/plot_global_grace_maps.py --directory data/ \
            data/plot_parameters_CSR_RL06_L60_r350km.txt \
            data/plot_parameters_GRFO_CSR_RL06_L60_r350km.txt \
            data/plot_parameters_GFZ_RL06_L60_r350km.txt \
            data/plot_parameters_GRFO_GFZ_RL06_L60_r350km.txt \
            data/plot_parameters_JPL_RL06_L60_r350km.txt \
            data/plot_parameters_GRFO_JPL_RL06_L60_r350km.txt
        python data/plot_GSFC_global_mascons.py --directory data/ \
            data/plot_parameters_GSFC_glb_rl06v1.0.txt
        python data/grace_months_html.py --directory data/
        python data/git_lfs_attributes.py --directory images/ \
            --regex "^(CSR|GFZ|GSFC|JPL)-(.*?)-(\d+).jpg"
    - name: Commit changes
      if: steps.changes.outputs.detected == 'true'
      run: |
        git config user.name 'Github Actions'
        git config user.email 'actions@github.com'
        git add .gitattributes data/GRACE-Months.html data/GRACE_months.txt images/*.jpg
        git commit -am "Automatic table updates"
    - name: Create pull request
      if: steps.changes.outputs.detected == 'true'
      uses: peter-evans/create-pull-request@v3
      with:
        assignees: ${{ github.actor }}
        author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
        title: "Automatic table updates"
